*** /home/vasimv/.arduino15/packages/arduino/hardware/sam/1.6.11/variants/arduino_due_x/variant.cpp.orig	2016-02-19 11:57:28.000000000 -0400
--- /home/vasimv/.arduino15/packages/arduino/hardware/sam/1.6.11/variants/arduino_due_x/variant.cpp	2017-08-20 09:40:31.421928903 -0400
***************
*** 287,292 ****
--- 287,322 ----
    // 91 - CAN1 all pins
    { PIOB, PIO_PB15A_CANRX1|PIO_PB14A_CANTX1, ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, (PIN_ATTR_DIGITAL|PIN_ATTR_COMBO), NO_ADC, NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER },
  
+   // 92 .. 102 - ETHERNET MAC
+   { PIOB, PIO_PB0A_ETXCK,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ETXCK
+   { PIOB, PIO_PB1A_ETXEN,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ETXEN
+   { PIOB, PIO_PB2A_ETX0,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ETX0
+   { PIOB, PIO_PB3A_ETX1,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ETX1
+   { PIOB, PIO_PB4A_ECRSDV,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ECRSDV
+   { PIOB, PIO_PB5A_ERX0,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ERX0
+   { PIOB, PIO_PB6A_ERX1,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ERX1
+   { PIOB, PIO_PB7A_ERXER,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // ERXER
+   { PIOB, PIO_PB8A_EMDC,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // EMDC
+   { PIOB, PIO_PB9A_EMDIO,   ID_PIOB, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // EMDIO
+   { PIOA, PIO_PA5A_TIOA2,   ID_PIOA, PIO_PERIPH_A, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // MDINTR
+   
+   // 103 - 109 additional pins
+   // 103 - PB24
+   { PIOB, PIO_PB24A_SCK2,   ID_PIOB, PIO_PERIPH_B, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // SCK2
+   // 104 - PB23
+   { PIOB, PIO_PB23A_CTS2,   ID_PIOB, PIO_PERIPH_B, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // CTS2
+   // 105 - PB22
+   { PIOB, PIO_PB22A_RTS2,   ID_PIOB, PIO_PERIPH_B, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC,  NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // RTS2  
+   // 106 - PC27
+   { PIOC, PIO_PC27,         ID_PIOC, PIO_OUTPUT_0, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC, NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // PC27
+   // 107 - PC20
+   { PIOC, PIO_PC20,         ID_PIOC, PIO_PERIPH_B, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC, NO_ADC, NOT_ON_PWM,     NOT_ON_TIMER }, // PC20
+   // 108 - PC10
+   { PIOC, PIO_PC10,         ID_PIOC, PIO_OUTPUT_0, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC, NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // PC10 
+   // 109 - PC11
+   { PIOC, PIO_PC11,         ID_PIOC, PIO_OUTPUT_0, PIO_DEFAULT, PIN_ATTR_DIGITAL,                  NO_ADC, NO_ADC, NOT_ON_PWM,  NOT_ON_TIMER }, // PC
+   
+   
    // END
    { NULL, 0, 0, PIO_NOT_A_PIN, PIO_DEFAULT, 0, NO_ADC, NO_ADC, NOT_ON_PWM, NOT_ON_TIMER }
  } ;
***************
*** 380,390 ****
      while (true);
    }
  
    // Initialize C library
    __libc_init_array();
  
    // Disable pull-up on every pin
!   for (unsigned i = 0; i < PINS_COUNT; i++)
  	  digitalWrite(i, LOW);
  
    // Enable parallel access on PIO output data registers
--- 410,423 ----
      while (true);
    }
  
+   // Disable watchdog
+   WDT_Disable(WDT);
+ 
    // Initialize C library
    __libc_init_array();
  
    // Disable pull-up on every pin
!   for (int i = 0; i < PINS_COUNT; i++)
  	  digitalWrite(i, LOW);
  
    // Enable parallel access on PIO output data registers
***************
*** 435,440 ****
--- 468,568 ----
      g_APinDescription[PINS_CAN1].ulPin,
      g_APinDescription[PINS_CAN1].ulPinConfiguration);
  
+   // Initialize additional pins
+   // Initialize EMAC pins
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_EREFCK].pPort,
+     g_APinDescription[PIN_EMAC_EREFCK].ulPinType,
+     g_APinDescription[PIN_EMAC_EREFCK].ulPin,
+     g_APinDescription[PIN_EMAC_EREFCK].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ETXEN].pPort,
+     g_APinDescription[PIN_EMAC_ETXEN].ulPinType,
+     g_APinDescription[PIN_EMAC_ETXEN].ulPin,
+     g_APinDescription[PIN_EMAC_ETXEN].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ETX0].pPort,
+     g_APinDescription[PIN_EMAC_ETX0].ulPinType,
+     g_APinDescription[PIN_EMAC_ETX0].ulPin,
+     g_APinDescription[PIN_EMAC_ETX0].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ETX1].pPort,
+     g_APinDescription[PIN_EMAC_ETX1].ulPinType,
+     g_APinDescription[PIN_EMAC_ETX1].ulPin,
+     g_APinDescription[PIN_EMAC_ETX1].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ECRSDV].pPort,
+     g_APinDescription[PIN_EMAC_ECRSDV].ulPinType,
+     g_APinDescription[PIN_EMAC_ECRSDV].ulPin,
+     g_APinDescription[PIN_EMAC_ECRSDV].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ERX0].pPort,
+     g_APinDescription[PIN_EMAC_ERX0].ulPinType,
+     g_APinDescription[PIN_EMAC_ERX0].ulPin,
+     g_APinDescription[PIN_EMAC_ERX0].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ERX1].pPort,
+     g_APinDescription[PIN_EMAC_ERX1].ulPinType,
+     g_APinDescription[PIN_EMAC_ERX1].ulPin,
+     g_APinDescription[PIN_EMAC_ERX1].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_ERXER].pPort,
+     g_APinDescription[PIN_EMAC_ERXER].ulPinType,
+     g_APinDescription[PIN_EMAC_ERXER].ulPin,
+     g_APinDescription[PIN_EMAC_ERXER].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_EMDC].pPort,
+     g_APinDescription[PIN_EMAC_EMDC].ulPinType,
+     g_APinDescription[PIN_EMAC_EMDC].ulPin,
+     g_APinDescription[PIN_EMAC_EMDC].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_EMAC_EMDIO].pPort,
+     g_APinDescription[PIN_EMAC_EMDIO].ulPinType,
+     g_APinDescription[PIN_EMAC_EMDIO].ulPin,
+     g_APinDescription[PIN_EMAC_EMDIO].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_TC0_TIOA2].pPort,
+     g_APinDescription[PIN_TC0_TIOA2].ulPinType,
+     g_APinDescription[PIN_TC0_TIOA2].ulPin,
+     g_APinDescription[PIN_TC0_TIOA2].ulPinConfiguration);
+ 
+   // Initialize PB24 PB23 PB22 PC27 PC20 PC10 PC11
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP0].pPort,
+     g_APinDescription[PIN_TAIJI_TP0].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP0].ulPin,
+     g_APinDescription[PIN_TAIJI_TP0].ulPinConfiguration);  
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP1].pPort,
+     g_APinDescription[PIN_TAIJI_TP1].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP1].ulPin,
+     g_APinDescription[PIN_TAIJI_TP1].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP2].pPort,
+     g_APinDescription[PIN_TAIJI_TP2].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP2].ulPin,
+     g_APinDescription[PIN_TAIJI_TP2].ulPinConfiguration);  
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP3].pPort,
+     g_APinDescription[PIN_TAIJI_TP3].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP3].ulPin,
+     g_APinDescription[PIN_TAIJI_TP3].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP4].pPort,
+     g_APinDescription[PIN_TAIJI_TP4].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP4].ulPin,
+     g_APinDescription[PIN_TAIJI_TP4].ulPinConfiguration);  
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP5].pPort,
+     g_APinDescription[PIN_TAIJI_TP5].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP5].ulPin,
+     g_APinDescription[PIN_TAIJI_TP5].ulPinConfiguration);
+   PIO_Configure(
+     g_APinDescription[PIN_TAIJI_TP6].pPort,
+     g_APinDescription[PIN_TAIJI_TP6].ulPinType,
+     g_APinDescription[PIN_TAIJI_TP6].ulPin,
+     g_APinDescription[PIN_TAIJI_TP6].ulPinConfiguration);  
+ 
    // Initialize Analog Controller
    pmc_enable_periph_clk(ID_ADC);
    adc_init(ADC, SystemCoreClock, ADC_FREQ_MAX, ADC_STARTUP_FAST);
